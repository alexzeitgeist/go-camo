{"name":"Go-camo","tagline":"Go version of Camo server.","body":"go-camo\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/cactus/go-camo.png?branch=master)](https://travis-ci.org/cactus/go-camo)\r\n\r\n## About\r\n\r\nGo version of [Camo][1] server.\r\n\r\n[Camo][1] is a special type of image proxy that proxies non-secure images over\r\nSSL/TLS. This prevents mixed content warnings on secure pages.\r\n\r\nIt works in conjunction with back-end code to rewrite image URLs and sign them\r\nwith an [HMAC][4].\r\n\r\n## How it works\r\n\r\nFirst you parse the original URL, generate an HMAC signature of it, then encode\r\nit, and then place the pieces into the expected format replacing the original\r\nimage URL.\r\n\r\nThe client requests the URL to Go-Camo. Go-Camo validates the HMAC, decodes the\r\nURL, requests the content and streams it to the client.\r\n\r\nGo-Camo supports both hex and base64 encoded urls at the same time.\r\n\r\n| encoding | tradeoffs                                               |\r\n| -------- | ------------------------------------------------------- |\r\n| hex      | longer, case insensitive, slightly faster encode/decode |\r\n| base64   | shorter, case sensitive, slightly slower encode/decode  |\r\n\r\nFor examples of url generation, see the [examples](examples/) directory.\r\n\r\nWhile Go-Camo will support proxying HTTPS images as well, for performance\r\nreasons you may choose to filter HTTPS requests out from proxying, and let the\r\nclient simply fetch those as they are. The code example above does this.\r\n\r\nNote that it is recommended to front Go-Camo with a CDN when possible.\r\n\r\n## Differences from Camo\r\n\r\n*   Go-Camo supports 'Path Format' url format only. Camo's \"Query\r\n    String Format\" is not supported.\r\n*   Go-Camo supports \"allow regex host filters\".\r\n*   Go-Camo supports client http keep-alives.\r\n*   Go-Camo provides native SSL support.\r\n*   Go-Camo supports using more than one os thread (via GOMAXPROCS) without the\r\n    need of multiple instances or additional proxying.\r\n*   Go-Camo builds to a static binary. This makes deploying to large numbers\r\n    of servers a snap.\r\n*   Go-Camo supports both Hex and Base64 urls. Base64 urls are smaller, but\r\n    case sensitive.\r\n*   Go-Camo supports HTTP HEAD requests.\r\n*   Go-Camo allows custom default headers to be added -- useful for things\r\n    like adding [HSTS][10] headers.\r\n\r\n## Building\r\n\r\nBuilding requires `git` and `make`. Optional requirements are `pod2man` (to\r\nbuild man pages), and fpm (to build rpms).  A functional [Go][3] installation\r\n(version >= 1.4) is also required.\r\n\r\n    # show make targets\r\n    $ make\r\n    Available targets:\r\n      help                this help\r\n      clean               clean up\r\n      all                 build binaries and man pages\r\n      build               build all\r\n      build-go-camo       build go-camo\r\n      build-url-tool      build url tool\r\n      build-simple-server build simple server\r\n      test                run tests\r\n      cover               run tests with cover output\r\n      man                 build all man pages\r\n      man-go-camo         build go-camo man pages\r\n      man-url-tool        build url-tool man pages\r\n      man-simple-server   build simple-server man pages\r\n      rpm                 build rpm\r\n\r\n    # build all binaries and man pages. results will be in build/ dir\r\n    $ make all\r\n\r\n    # as an alternative to the previous command, build and strip debug symbols.\r\n    # this is useful for production, and reduces the resulting file size.\r\n    $ make all GOBUILD_LDFLAGS=\"-s\"\r\n\r\nBy default, Go-Camo builds with `-tags netgo`. However, this will not\r\nactually result in Go-Camo using the netgo resolver unless your Go stdlib is\r\nsimilarly compiled. There are [known][11] issues with using the libc resolver\r\nwith significant traffic amounts over time. The use of netgo is recommended. To\r\nrecompile your Go net libraries to use netgo, do the following as root (or the\r\nowner of your GOROOT install) before building Go-Camo:\r\n\r\n    $ go clean -i net\r\n    $ go install -a -tags netgo std\r\n\r\nTo confirm that you are using the netgo resolver:\r\n\r\n    $ make build\r\n    $ ldd build/bin/go-camo\r\n\tnot a dynamic executable\r\n\r\nIf you are using the libc resolver, you will see something like this instead:\r\n\r\n    $ make build\r\n    $ ldd build/bin/go-camo\r\n    linux-vdso.so.1 =>  (0x00007fff98fff000)\r\n    libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003fb2a00000)\r\n    libc.so.6 => /lib64/libc.so.6 (0x0000003fb2600000)\r\n    /lib64/ld-linux-x86-64.so.2 (0x0000003fb2200000)\r\n\r\n## Running\r\n\r\n    $ go-camo -k \"somekey\"\r\n\r\nGo-Camo does not daemonize on its own. For production usage, it is recommended\r\nto launch in a process supervisor, and drop privileges as appropriate.\r\n\r\nExamples of supervisors include: [daemontools][5], [runit][6], [upstart][7],\r\n[launchd][8], and many more.\r\n\r\nFor the reasoning behind lack of daemonization, see [daemontools/why][9]. In\r\naddition, the code is much simpler because of it.\r\n\r\n## Running on Heroku\r\n\r\nIn order to use this on Heroku with the provided Procfile, you need to:\r\n\r\n1.  Create an app specifying the https://github.com/kr/heroku-buildpack-go\r\n    buildpack\r\n2.  Set `HMAC_KEY` to the key you are using\r\n\r\n## Configuring\r\n\r\n### Environment Vars\r\n\r\n*   `GOCAMO_HMAC` - HMAC key to use.\r\n\r\n### Command line flags\r\n\r\n    $ go-camo -h\r\n    Usage:\r\n      go-camo [OPTIONS]\r\n\r\n    Application Options:\r\n      -k, --key=           HMAC key\r\n      -H, --header=        Extra header to return for each response. This option\r\n                           can be used multiple times to add multiple headers\r\n          --stats          Enable Stats\r\n          --allow-list=    Text file of hostname allow regexes (one per line)\r\n          --max-size=      Max response image size (KB) (5120)\r\n          --timeout=       Upstream request timeout (4s)\r\n          --max-redirects= Maximum number of redirects to follow (3)\r\n          --no-fk          Disable frontend http keep-alive support\r\n          --no-bk          Disable backend http keep-alive support\r\n          --listen=        Address:Port to bind to for HTTP (0.0.0.0:8080)\r\n          --ssl-listen=    Address:Port to bind to for HTTPS/SSL/TLS\r\n          --ssl-key=       ssl private key (key.pem) path\r\n          --ssl-cert=      ssl cert (cert.pem) path\r\n      -v, --verbose        Show verbose (debug) log level output\r\n      -V, --version        print version and exit\r\n\r\n    Help Options:\r\n      -h, --help          Show this help message\r\n\r\n\r\nIf an allow-list file is defined, that file is read and each line converted\r\ninto a hostname regex. If a request does not match one of the listed host\r\nregex, then the request is denied.\r\n\r\nIf stats flag is provided, then the service will track bytes and clients\r\nserved, and offer them up at an http endpoint `/status` via HTTP GET request.\r\n\r\nIf the HMAC key is provided on the command line, it will override (if present),\r\nan HMAC key set in the environment var.\r\n\r\nAdditional default headers (headers sent on every reply) can also be set. The\r\n`-H, --header` argument may be specified many times.\r\n\r\nThe list of default headers sent are:\r\n\r\n    X-Content-Type-Options: nosniff\r\n    X-XSS-Protection: 1; mode=block\r\n    Content-Security-Policy: default-src 'none'`\r\n\r\nAs an example, if you wanted to return a `Strict-Transport-Security` header\r\nby default, you could add this to the command line:\r\n\r\n    -H \"Strict-Transport-Security:  max-age=16070400\"\r\n\r\n## Additional tools\r\n\r\nGo-Camo includes a couple of additional tools.\r\n\r\n### url-tool\r\n\r\nThe `url-tool` utility provides a simple way to generate signed URLs from the command line.\r\n\r\n    $ url-tool -h\r\n    Usage:\r\n      url-tool [OPTIONS] <decode | encode>\r\n\r\n    Application Options:\r\n      -k, --key=    HMAC key\r\n      -p, --prefix= Optional url prefix used by encode output\r\n\r\n    Help Options:\r\n      -h, --help    Show this help message\r\n\r\n    Available commands:\r\n      decode  Decode a url and print result\r\n      encode  Encode a url and print result\r\n\r\nExample usage:\r\n\r\n    # hex\r\n    $ url-tool -k \"test\" encode -p \"https://img.example.org\" \"http://golang.org/doc/gopher/frontpage.png\"\r\n    https://img.example.org/0f6def1cb147b0e84f39cbddc5ea10c80253a6f3/687474703a2f2f676f6c616e672e6f72672f646f632f676f706865722f66726f6e74706167652e706e67\r\n\r\n    $ url-tool -k \"test\" decode \"https://img.example.org/0f6def1cb147b0e84f39cbddc5ea10c80253a6f3/687474703a2f2f676f6c616e672e6f72672f646f632f676f706865722f66726f6e74706167652e706e67\"\r\n    http://golang.org/doc/gopher/frontpage.png\r\n\r\n    # base64\r\n    $ url-tool -k \"test\" encode -b base64 -p \"https://img.example.org\" \"http://golang.org/doc/gopher/frontpage.png\"\r\n    https://img.example.org/D23vHLFHsOhPOcvdxeoQyAJTpvM/aHR0cDovL2dvbGFuZy5vcmcvZG9jL2dvcGhlci9mcm9udHBhZ2UucG5n\r\n\r\n    $ url-tool -k \"test\" decode \"https://img.example.org/D23vHLFHsOhPOcvdxeoQyAJTpvM/aHR0cDovL2dvbGFuZy5vcmcvZG9jL2dvcGhlci9mcm9udHBhZ2UucG5n\"\r\n    http://golang.org/doc/gopher/frontpage.png\r\n\r\n### simple-server\r\n\r\nThe `simple-server` utility is useful for testing. It serves the contents of a\r\ngiven directory over http. Nothing more.\r\n\r\n    $ simple-server -h\r\n    Usage:\r\n      simple-server [OPTIONS] DIR\r\n\r\n    Application Options:\r\n      -l, --listen= Address:Port to bind to for HTTP (0.0.0.0:8000)\r\n\r\n    Help Options:\r\n      -h, --help    Show this help message\r\n\r\n## Changelog\r\n\r\nSee `CHANGELOG.md`\r\n\r\n## License\r\n\r\nReleased under the [MIT\r\nlicense](http://www.opensource.org/licenses/mit-license.php). See `LICENSE.md`\r\nfile for details.\r\n\r\n[1]: https://github.com/atmos/camo\r\n[3]: http://golang.org/doc/install\r\n[4]: http://en.wikipedia.org/wiki/HMAC\r\n[5]: http://cr.yp.to/daemontools.html\r\n[6]: http://smarden.org/runit/\r\n[7]: http://upstart.ubuntu.com/\r\n[8]: http://launchd.macosforge.org/\r\n[9]: http://cr.yp.to/daemontools/faq/create.html#why\r\n[10]: https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\r\n[11]: https://github.com/cactus/go-camo/issues/6\r\n[12]: https://codereview.appspot.com/151730045#msg10\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}